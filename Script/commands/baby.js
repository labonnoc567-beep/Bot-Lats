const axios = require("axios");

module.exports.config = {
  name: "baby",
  version: "7.0.0",
  hasPermssion: 0,
  credits: "Maruf + ChatGPT",
  description: "GF-style Bangla bot: flirty, angry, contextual, smart AI fallback",
  commandCategory: "chat",
  usages: "",
  cooldowns: 0,
  prefix: false
};

const GEMINI_API_KEY = "AIzaSyBgyiqS61B_CUPEyvvSFObElGARkjbl-fs";

const MARUF_UID = "100070782965051";
const MONIKA_UID = "100070782965051";
const MONIKA_NAMES = ["shi zuka", "sizuka", "shizuka", "Princess", "Monika", "princess Monika", "‡¶Æ‡¶®‡¶ø‡¶ï‡¶æ", "‡¶Æ‡¶®‡¶ø", "Moni"];

const flirtyReplies = [
  "‡¶§‡ßÅ‡¶á ‡¶π‡¶æ‡¶∏‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶æ‡¶á ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü üòö",
  "‡¶§‡ßÅ‡¶á ‡¶è‡¶§ ‡¶ï‡¶ø‡¶â‡¶ü, ‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶ï‡¶æ‡¶Æ‡ßú‡¶æ‡ßü ‡¶ñ‡¶æ‡¶á! üòè",
  "‡¶ö‡ßã‡¶ñ‡ßá ‡¶ö‡ßã‡¶ñ ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶™‡ßú‡ßá ‡¶Ø‡¶æ‡¶á ‡¶∞‡ßá‚Ä¶ üò≥",
  "‡¶Ü‡¶ú ‡¶∞‡¶æ‡¶§‡¶ü‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ü‡¶æ‡¶¨‡¶ø ‡¶®‡¶æ‡¶ï‡¶ø? üòâ",
  "‡¶∏‡¶§‡ßç‡¶Ø‡¶ø ‡¶¨‡¶≤‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá‡¶á ‡¶≠‡¶æ‡¶≤‡ßã‡¶≤‡¶æ‡¶ó‡ßá ‡¶∏‡ßã‡¶®‡¶æüòªüòΩ",
  "‡¶â‡¶Æ‡ßç‡¶Æ‡¶Æ‡ßç‡¶Æ‡¶æ‡¶π‡¶π‡¶π‡¶π‡¶π ‡¶¨‡ßá‡¶¨ü•≥üíúüòº",
  "‡¶§‡ßÅ‡¶á ‡¶®‡¶æ ‡¶¨‡¶≤‡¶≤‡ßá ‡¶ò‡ßÅ‡¶Æ ‡¶Ü‡¶∏‡ßá ‡¶®‡¶æ ‡¶ú‡¶æ‡¶®‡ßÅ üòò",
  "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡ßã‡¶ï‡ßá‡¶á ‡¶®‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶¨‡¶ø üòã",
  "‡¶ï‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶â ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡¶ø? ü•∞"
];

const angryReplies = [
  "‡¶¨‡ßá‡¶∂‡¶ø ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶ø‡¶∏ ‡¶®‡¶æ, ‡¶∞‡¶æ‡¶ó ‡¶π‡ßü! üò†",
  "‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶≤‡¶ø! ‡¶Æ‡¶æ‡¶•‡¶æ ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶ï‡¶∞‡¶ø‡¶∏ ‡¶®‡¶æ ‡¶™‡ßç‡¶≤‡¶ø‡¶ú üò°",
  "‡¶§‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶° ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™! üòí",
  "‡¶®‡ßã‡¶ü ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ, ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶§‡ßã‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨ ‡¶®‡¶æ! üôÑ",
  "‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∂‡¶æ‡¶®‡ßç‡¶§ ‡¶π‡ßü‡ßá ‡¶•‡¶æ‡¶ï, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã! üò§",
  "‡¶â‡¶Æ‡ßç‡¶Æ‡¶Æ‡¶æ‡¶πüíã ‡¶è‡¶ñ‡¶® ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶ö‡ßÅ‡¶™üòë"
];

const gfVibeReplies = [
  "‡¶Ü‡¶ú‡¶ï‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶§‡ßã‡¶ï‡ßá üòå",
  "‡¶§‡ßÅ‡¶á ‡¶Ü‡¶õ‡¶ø‡¶∏ ‡¶¨‡¶≤‡ßá ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡¶æ‡¶ó‡ßá ‡¶ú‡¶æ‡¶®‡ßÅ ‚ù§Ô∏è",
  "‡¶§‡ßã‡¶∞ ‡¶Æ‡ßÅ‡¶ñ ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá ‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü! ü•∫",
  "‡¶§‡ßÅ‡¶á ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ special ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶∏? ü§≠",
  "‡¶§‡ßÅ‡¶á ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ö‡¶®‡ßá‡¶ï lonely ‡¶≤‡¶æ‡¶ó‡¶§‡ßã! üò¢"
];

// GF-style noprefix trigger words & replies
const botNoprefixWords = [
  "bot", "baby", "jan", "‡¶ú‡¶æ‡¶®‡ßÅ", "‡¶¨‡ßá‡¶¨‡¶ø", "‡¶ú‡¶æ‡¶®", "bbs", "bbz"
];
const botNoprefixReplies = [
  "‡¶¨‡¶≤‡ßã baby üí¨",
  "‡¶π‡ßÅ‡¶Æ? ‡¶¨‡¶≤‡ßã üò∫",
  "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶ú‡¶æ‡¶®‡ßÅ üòö",
  "‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø ‡¶¨‡ßá‡¶¨‡¶ø üòò",
  "‡¶Ü‡¶õ‡¶ø, ‡¶¨‡¶≤‡ßã ‡¶ï‡ßÄ ‡¶π‡ßü‡ßá‡¶õ‡ßá ü§ñ",
  "‡¶¨‡¶≤‡ßã ‡¶§‡ßã ‡¶∂‡ßÅ‡¶®‡¶ø ‚ù§Ô∏è",
  "‡¶è‡¶§‡ßã ‡¶°‡ßá‡¶ï‡ßã ‡¶®‡¶æ, ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶™‡ßú‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã ‡¶§‡ßãüôà",
  "‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ï‡¶≤‡ßá ‡¶Æ‡¶æ‡¶•‡¶æ ‡¶ó‡¶∞‡¶Æ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅüòë",
  "‡¶ú‡¶æ‡¶® ‡¶¨‡¶≤‡ßã, ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá? üíã"
];

const contextualReplies = {
  "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø": ["‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá‡¶á ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø ‡¶ú‡¶æ‡¶® ü•∞", "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá ‡¶™‡¶æ‡¶ñ‡¶ø üòö"],
  "‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™": ["‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶ï‡¶∞‡ßã ‡¶®‡¶æ ‡¶¨‡ßá‡¶¨‡¶ø, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶Ü‡¶õ‡¶ø ‡¶®‡¶æ? ü•∫", "‡¶è‡¶á ‡¶®‡¶æ‡¶ì ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶æ‡¶¶‡ßÅ ‡¶ú‡¶æ‡¶™‡ßç‡¶™‡¶ø ü§ó"],
  "‡¶ï‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø‡¶∏": ["‡¶§‡ßã‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶≠‡¶æ‡¶¨‡¶õ‡¶ø ‡¶∞‡ßá ‡¶¨‡ßã‡¶ï‡¶æ ü§≠", "‡¶§‡ßÅ‡¶á ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü!"],
  "miss you": ["‡¶Ü‡¶Æ‡¶ø‡¶ì ‡¶§‡ßã ‡¶§‡ßã‡¶ï‡ßá ‡¶≠‡ßÄ‡¶∑‡¶£ ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶ú‡¶æ‡¶®‡ßÅ üò¢", "‡¶§‡ßÅ‡¶á ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ü‡¶∏‡¶≤‡ßá‡¶á ‡¶Æ‡¶®‡¶ü‡¶æ ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶π‡ßü üíï"],
  "‡¶™‡¶æ‡¶ó‡¶≤": ["‡¶§‡ßã‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶™‡¶æ‡¶ó‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶æ‡¶ó‡ßá ‡¶®‡¶æ ü•¥", "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶∞‡ßá, ‡¶§‡ßã‡¶∞ ‡¶™‡¶æ‡¶ó‡¶≤‡ßÄ‡¶á ‡¶Ü‡¶Æ‡¶ø! üôà"],
  "love you": ["Love you toooo jaan üòò", "‡¶§‡ßÅ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶π‡¶ø‡ßü‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶∞‡ßá! üíû"],
  "‡¶§‡ßÅ‡¶á ‡¶ï‡ßã‡¶•‡¶æ‡ßü": ["‡¶§‡ßã‡¶∞ ‡¶Æ‡¶®‡ßá‡¶á ‡¶Ü‡¶õ‡¶ø üòå", "‡¶™‡¶æ‡¶∂‡ßá‡¶á ‡¶§‡ßã ‡¶Ü‡¶õ‡¶ø, ‡¶¨‡ßã‡¶ï‡¶æ!"],
  "single": ["‡¶§‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶á ‡¶§‡ßã ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡¶ø üòí", "‡¶§‡ßÅ‡¶á ‡¶∞‡¶æ‡¶ú‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶®‡¶æ! üòè"],
  "‡¶ö‡ßÅ‡¶Æ‡ßÅ": ["‡¶Ü‡¶∏‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ö‡ßÅ‡¶Æ‡ßÅ ‡¶¶‡ßá‡¶á üòò", "‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßÅ‡¶Æ‡ßÅ ready üíã"],
  "‡¶ó‡ßÅ‡¶° ‡¶®‡¶æ‡¶á‡¶ü": ["Sweet dream ‡¶ú‡¶æ‡¶®‡ßÅ üíñ", "‡¶ò‡ßÅ‡¶Æ‡¶ø‡ßü‡ßá ‡¶™‡ßú‡ßã, ‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶®‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßã üòâ"]
};

const smartReplies = [
  ...flirtyReplies,
  ...angryReplies,
  ...gfVibeReplies,
  "‡¶§‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡¶æ‡¶ï‡¶ø? üòí",
  "‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶á ‡¶§‡ßÅ‡¶á?", "‡¶è‡¶á‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡¶ø ‡¶∂‡¶∂‡ßÅ‡¶∞ ‡¶¨‡¶æ‡ßú‡¶ø ‡¶Ø‡¶æ", "‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶æ‡¶® ‡¶∂‡ßÅ‡¶®‡¶æüòú",
  "‡¶ö‡ßÅ‡¶™‡¶ö‡¶æ‡¶™ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ ‡¶ï‡¶∞ üòö", "‡¶π‡ßÅ‡¶Æ üòò", "‡¶®‡¶æ‡¶π ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ó‡¶≤‡¶æ‡ßü ‡¶™‡ßã‡¶ï‡¶æ ‡¶°‡ßÅ‡¶ï‡¶õ‡ßá"
];

const triggerReplies = [
  {
    keys: ["owner", "ceo", "admin"],
    reply: "[ üëëOWNER: Maruf Billah\nFacebook: https://facebook.com/profile.php?id=100070782965051\nBot Name: ìÜ©ùôéùô™ùôØùô™ìÜ™ü•∞(„Åô„Åö)üíã\nFor contact, inbox him directly. ]"
  },
  {
    keys: ["name", "bot name", "tor nam ki"],
    reply: "My name is ìÜ©ùôéùô™ùôØùô™ìÜ™ü•∞(„Åô„Åö)üíã, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ virtual GF! üòΩ"
  },
  {
    keys: ["about", "info"],
    reply: "‡¶Ü‡¶Æ‡¶ø Maruf Billah-‡¶è‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã GF style AI ‡¶¨‡¶ü! ‡¶™‡ßç‡¶∞‡ßá‡¶Æ, ‡¶Æ‡¶ú‡¶æ, ‡¶´‡¶æ‡¶®‡¶ø ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶§‡ßá‡¶á ready! ü¶ã"
  },
  {
    keys: ["time", "bot time"],
    reply: () => "‚è∞ ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡ßü: " + new Date().toLocaleString("bn-BD", { timeZone: "Asia/Dhaka" })
  },
  {
    keys: ["ping", "‡¶™‡¶ø‡¶Ç"],
    reply: "‡¶™‡¶Ç! ü§≠"
  }
];

let botPausedUntil = 0;

function isOnlyEmoji(str) {
  return !str.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|[\uD83C-\uDBFF\uDC00-\uDFFF]|\s|\n)/g, "");
}
async function isSenderAdmin(event, api) {
  if (event.senderID === MARUF_UID) return true;
  try {
    const threadInfo = await api.getThreadInfo(event.threadID);
    return threadInfo.adminIDs.map(e => e.id).includes(event.senderID);
  } catch {
    return false;
  }
}

// Gemini-pro API Call
async function getGeminiReply(msg) {
  try {
    const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡ßÅ‡¶∑‡ßç‡¶ü‡ßÅ, ‡¶Æ‡ßÅ‡¶°‡¶ø, ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï, ‡¶´‡ßç‡¶≤‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ GF ‡¶¨‡¶ü‡•§ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶≤‡ßá GF style-‡¶è context ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶ï‡¶ñ‡¶®‡ßã cute, ‡¶ï‡¶ñ‡¶®‡ßã ‡¶∞‡¶æ‡¶ó‡ßÄ, ‡¶ï‡¶ñ‡¶®‡ßã ‡¶´‡ßç‡¶≤‡¶æ‡¶∞‡ßç‡¶ü‡¶ø, ‡¶ï‡¶ñ‡¶®‡ßã ‡¶Æ‡¶ú‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï ‡¶≠‡¶æ‡¶¨‡ßá reply ‡¶¶‡ßá‡¶¨‡ßá, boring ‡¶¨‡¶æ ‡¶¨‡ßú reply ‡¶®‡¶æ, ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü lively‡•§ User: "${msg}"`;
    const res = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
      { contents: [{ parts: [{ text: prompt }] }] }
    );
    let aiText = res?.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (aiText) {
      aiText = aiText.replace(/^"|"$/g, "").replace(/^\*\*|\*\*$/g, "");
      return aiText.trim();
    }
  } catch (err) {
    return null;
  }
}

module.exports.handleEvent = async function ({ api, event, Users }) {
  try {
    const msg = event.body ? event.body.trim() : "";
    if (!msg) return;
    const lower = msg.toLowerCase();
    const name = await Users.getNameUser?.(event.senderID) || "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ";

    // Pause system
    if (lower === "bot stop") {
      const admin = await isSenderAdmin(event, api);
      if (admin) {
        botPausedUntil = Date.now() + 20000;
        return api.sendMessage("bot pause for 20 second bossüòò", event.threadID, event.messageID);
      }
    }
    if (Date.now() < botPausedUntil) return;

    const mentionObj = event.mentions || {};
    const mentionIDs = Object.keys(mentionObj);

    // Special Maruf-Monika mention
    const isMonikaMentioned = mentionIDs.includes(MONIKA_UID) || MONIKA_NAMES.some(name => lower.includes(name.toLowerCase()));
    const isMarufMentioned = mentionIDs.includes(MARUF_UID) || lower.includes("@maruf") || lower.includes("maruf billah");

    if (isMonikaMentioned && event.senderID === MARUF_UID) {
      return api.sendMessage("‡¶ú‡¶ø, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡ßç‡¶∑‡ßÅ‡¶®‡¶ø ‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡ßá‡¶ï‡ßá ‡¶Ü‡¶®‡¶õ‡¶ø, ‡¶ï‡ßã‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ ü•∫‚ù§Ô∏è", event.threadID, event.messageID);
    }
    if (isMonikaMentioned) {
      return api.sendMessage("‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶∏ ‡¶π‡ßü ‡¶ï‡¶ø ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶ó‡ßá ‡ß´‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æü§¨\n‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶â‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶æ‡¶§ ‡¶¨‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶¨‡¶¨‡¶ø", event.threadID, event.messageID);
    }
    if (isMarufMentioned) {
      return api.sendMessage("‡¶Ü‡¶ó‡ßá ‡¶¨‡¶∏ ‡¶Æ‡¶æ‡¶∞‡ßÅ‡¶´ ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶ø ‡¶è‡¶´ ‡¶¶‡¶æ‡¶ì ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡¶æ‡¶ï‡ßãü§≠", event.threadID, event.messageID);
    }

    if (isOnlyEmoji(msg)) return;

    // Noprefix triggers (owner/info/ping etc)
    for (const trg of triggerReplies) {
      if (trg.keys.some(k => lower === k || lower.startsWith(k))) {
        let replyText = typeof trg.reply === "function"
          ? trg.reply({ name })
          : trg.reply;
        return api.sendMessage(replyText, event.threadID, event.messageID);
      }
    }

    // ‚úÖ GF/baby/bot style random reply - no prefix
    if (botNoprefixWords.includes(lower)) {
      const botReply = botNoprefixReplies[Math.floor(Math.random() * botNoprefixReplies.length)];
      return api.sendMessage(botReply, event.threadID, event.messageID);
    }

    // Direct mention to bot (Monika UID)
    if (mentionIDs.includes(MONIKA_UID)) {
      return api.sendMessage("‡¶¨‡¶≤‡ßã ‡¶ï‡ßá‡¶® ‡¶°‡¶æ‡¶ï‡¶õ‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá? ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶¨‡¶≤‡ßã, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã! üòë", event.threadID, event.messageID);
    }

    // If user replied to bot
    if (event.messageReply?.senderID === api.getCurrentUserID()) {
      // 1. Contextual reply
      for (const key in contextualReplies) {
        if (lower.includes(key)) {
          const replies = contextualReplies[key];
          return api.sendMessage(replies[Math.floor(Math.random() * replies.length)], event.threadID, event.messageID);
        }
      }
      // 2. Gemini-pro AI (GF+Flirty+Angry)
      const aiReply = await getGeminiReply(msg);
      if (aiReply && aiReply.length > 1) return api.sendMessage(aiReply, event.threadID, event.messageID);

      // 3. Simsimi fallback
      try {
        const sim = await axios.get(`https://api.simsimi.net/v2/?text=${encodeURIComponent(msg)}&lc=bn`);
        if (sim?.data?.success) {
          return api.sendMessage(sim.data.success, event.threadID, event.messageID);
        }
      } catch { }

      // 4. If all fails, fallback random vibe (flirty+angry+gf)
      const fallback = smartReplies[Math.floor(Math.random() * smartReplies.length)];
      return api.sendMessage(fallback, event.threadID, event.messageID);
    }

    // Otherwise stay silent
    return;

  } catch (e) {
    console.log(e);
  }
};

module.exports.run = async function ({ api, event }) {
  const allReplies = [...flirtyReplies, ...angryReplies, ...gfVibeReplies];
  const reply = allReplies[Math.floor(Math.random() * allReplies.length)];
  return api.sendMessage(reply, event.threadID, event.messageID);
};
