const axios = require("axios");

module.exports.config = {
  name: "baby",
  version: "6.1.0",
  hasPermssion: 0,
  credits: "Maruf + ChatGPT",
  description: "GF style Bengali smart bot, reply only on reply, mention, or fixed trigger (Gemini AI fallback, Obot style included!)",
  commandCategory: "chat",
  usages: "",
  cooldowns: 0,
  prefix: false
};

const GEMINI_API_KEY = "YOUR_GEMINI_API_KEY"; // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ Gemini-pro key ‡¶¨‡¶∏‡¶æ‡¶ì!

const MARUF_UID = "100070782965051";
const MONIKA_UID = "100070782965051";
const MONIKA_NAMES = ["shi zuka", "sizuka", "shizuka", "Princess", "Monika", "princess Monika", "‡¶Æ‡¶®‡¶ø‡¶ï‡¶æ", "‡¶Æ‡¶®‡¶ø", "Moni"];

// Owner, bot, about, ping etc. special trigger reply
const triggerReplies = [
  {
    keys: ["owner", "ceo", "admin"],
    reply: "[ üëëOWNER: Maruf Billah\nFacebook: https://facebook.com/profile.php?id=100070782965051\nBot Name: ìÜ©ùôéùô™ùôØùô™ìÜ™ü•∞(„Åô„Åö)üíã\nFor contact, inbox him directly. ]"
  },
  {
    keys: ["name", "bot name", "tor nam ki"],
    reply: "My name is ìÜ©ùôéùô™ùôØùô™ìÜ™ü•∞(„Åô„Åö)üíã, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ virtual GF! üòΩ"
  },
  {
    keys: ["about", "info"],
    reply: "‡¶Ü‡¶Æ‡¶ø Maruf Billah-‡¶è‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã GF style AI ‡¶¨‡¶ü! ‡¶™‡ßç‡¶∞‡ßá‡¶Æ, ‡¶Æ‡¶ú‡¶æ, ‡¶´‡¶æ‡¶®‡¶ø ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶§‡ßá‡¶á ready! ü¶ã"
  },
  {
    keys: ["time", "bot time"],
    reply: () => "‚è∞ ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡ßü: " + new Date().toLocaleString("bn-BD", { timeZone: "Asia/Dhaka" })
  },
  {
    keys: ["love you bot", "love you"],
    reply: "‡¶Ü‡¶á ‡¶≤‡¶æ‡¶≠ ‡¶á‡¶â ‡¶ü‡ßÅ ‡¶™‡¶æ‡¶ñ‡¶ø üòö"
  },
  {
    keys: ["ping", "‡¶™‡¶ø‡¶Ç"],
    reply: "‡¶™‡¶Ç! ü§≠"
  },
  {
    keys: ["miss you"],
    reply: "‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∞‡¶æ‡¶á‡¶§‡ßá ‡¶Æ‡¶ø‡¶∏ ‡¶ñ‡¶æ‡¶áü•πü§ñüëÖ"
  },
  {
    keys: ["sim", "simsimi"],
    reply: "Simsimi ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶ñ‡¶® ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶®‡¶æ, ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßã baby"
  },
  {
    keys: ["bc", "mc"],
    reply: "SAME TO YOUüòä"
  },
  {
    keys: ["bye", "pore kotha hbe"],
    reply: "‡¶ï‡¶ø‡¶∞‡ßá ‡¶§‡ßÅ‡¶á ‡¶ï‡¶á ‡¶Ø‡¶æ‡¶∏ ‡¶ï‡ßã‡¶® ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶ø‡¶™‡¶æ‡¶Ø‡¶º ‡¶Ø‡¶æ‡¶¨‡¶ø..!üåöüå∂Ô∏èüçÜ‚õèÔ∏è"
  },
  {
    keys: ["roast"],
    reply: () => {
      const roasts = [
        "‡¶§‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶§‡ßá‡¶≤ ‡¶Ü‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¨‡ßç‡¶∞‡ßá‡¶á‡¶® ‡¶®‡¶æ‡¶á! üòÜ",
        "‡¶§‡ßÅ‡¶á ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ ‡¶Ü‡¶∞‡¶ì ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶π‡¶§‡ßã! ü§£",
        "‡¶§‡ßã‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶´‡ßç‡¶∞‡¶ø ‡¶´‡¶æ‡ßü‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßá‡¶ì ‡¶¨‡¶æ‡¶ú‡ßá ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞! üòÇ",
        "‡¶§‡ßã‡¶∞ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Æ‡¶∂‡¶æ ‡¶π‡¶æ‡¶∏‡¶¨‡ßá! üòú"
      ];
      return roasts[Math.floor(Math.random() * roasts.length)];
    }
  },
  {
    keys: ["/bot", "bot", "‡¶¨‡¶ü", "robot"],
    reply: ({ name }) => {
      const botReplies = [
        "‡¶§‡ßÅ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶°‡ßá‡¶ï‡ßá‡¶õ‡¶ø‡¶∏? üò∫",
        "‡¶¨‡¶≤ ‡¶¶‡ßã‡¶∏‡ßç‡¶§! ‡¶ï‡ßÄ ‡¶ö‡¶æ‡¶á ‡¶§‡ßã‡¶∞?",
        "‡¶¨‡ßá‡¶∂‡¶ø ‡¶°‡ßá‡¶ï‡ßã ‡¶®‡¶æ, ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶™‡ßú‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã! üòπ",
        "I'm your smart bot, ‡¶ï‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá? ü§ñ",
        "Bot-‡¶è‡¶∞ ‡¶ï‡¶•‡¶æ‡ßü ‡¶Æ‡¶® ‡¶≠‡¶∞‡ßá‡¶®‡¶æ, ‡¶ú‡¶æ‡¶®‡ßÅ!",
        "‡¶ï‡¶ø‡¶∞‡ßá, ‡¶§‡ßã‡¶ï‡ßá ‡¶ï‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø-‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßã? üòè"
      ];
      return `${name}, ${botReplies[Math.floor(Math.random() * botReplies.length)]}`;
    }
  }
];

// GF Mode classic special reply
const specialReplies = [
  "‡¶¨‡¶≤‡ßã baby üí¨", "‡¶π‡ßÅ‡¶Æ? ‡¶¨‡¶≤‡ßã üò∫", "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶ú‡¶æ‡¶®‡ßÅ üòö", "‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø ‡¶¨‡ßá‡¶¨‡¶ø üòò", "‡¶Ü‡¶õ‡¶ø, ‡¶¨‡¶≤‡ßã ‡¶ï‡ßÄ ‡¶π‡ßü‡ßá‡¶õ‡ßá ü§ñ", "‡¶¨‡¶≤‡ßã ‡¶§‡ßã ‡¶∂‡ßÅ‡¶®‡¶ø ‚ù§Ô∏è"
];

const smartReplies = [
  "‡¶ö‡¶≤‡ßã ‡¶Ø‡¶æ‡¶áüòò", "‡¶®‡¶æ‡¶π ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ó‡¶≤‡¶æ‡ßü ‡¶™‡ßã‡¶ï‡¶æ ‡¶°‡ßÅ‡¶ï‡¶õ‡ßá", "‡¶ï‡¶ø ‡¶∞‡ßá! ‡¶§‡ßÅ‡¶á ‡¶è‡¶§‡ßã cute ‡¶ï‡ßá‡¶®? ü§≠", "‡¶§‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æüòë", " ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ ‡¶ï‡¶ø ‡¶õ‡ßá‡ßú‡ßá ‡¶¶‡¶ø‡¶õ‡ßã? ü•∫",
  "‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶æ‡¶® ‡¶∂‡ßÅ‡¶®‡¶æüòú", "‡¶è‡¶§‡ßã ‡¶°‡¶æ‡¶ï‡¶ø‡¶∏ ‡¶ï‡ßá‡¶® ?", "‡¶è‡¶á‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡¶ø ‡¶∂‡¶∂‡ßÅ‡¶∞ ‡¶¨‡¶æ‡ßú‡¶ø ‡¶Ø‡¶æ",
  "‡¶ì‡¶á ‡¶ú‡¶æ‡¶®, ‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™? ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡ßü! üíñ", "‡¶§‡ßÅ‡¶á ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶™‡¶æ‡¶∞‡¶´‡ßá‡¶ï‡ßç‡¶ü ü´∂", "‡¶§‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ ‡¶™‡¶æ‡¶∞‡¶ø! üòå",
  "‡¶§‡ßÅ‡¶á ‡¶è‡¶§‡ßã ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶® ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡¶≤‡¶ø ‡¶¨‡¶≤ ‡¶§‡ßã? ü§î", "‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ‡¶¨‡¶ø? ‚òï", "‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá‡¶á ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶ø‡¶∏ ‡¶®‡¶æ‡¶ï‡¶ø?",
  "‡¶π‡ßÅ‡¶Æ üòò", "chol prem koriü•≤", "‡¶Ü‡¶Æ‡¶æ‡¶∞‡ßá ‡¶ï‡ßã‡¶≤‡ßá ‡¶®‡ßáüå∏", "‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶á ‡¶§‡ßÅ‡¶á?",
  "‡¶Ü‡¶Æ‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶ø ‡¶®‡¶æ", "‡¶Ü‡¶ó‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá", "‡¶ï‡¶Æ‡ßÅ ‡¶®‡¶æ ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨‡¶ø",
  "‡¶è‡¶ï‡¶æ ‡¶è‡¶ï‡¶æ ‡¶ï‡¶ø ‡¶¶‡ßá‡¶ñ‡¶ø‡¶∏ ‡¶´‡ßã‡¶®‡ßá ‡¶Ü‡¶®‡ßç‡¶ü‡¶ø‡¶ï‡ßá ‡¶¨‡¶≤‡ßá ‡¶¶‡¶ø‡¶¨"
];

const contextualReplies = {
  "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø": ["‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá‡¶á ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø ‡¶ú‡¶æ‡¶® ü•∞", "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá ‡¶™‡¶æ‡¶ñ‡¶ø üòö"],
  "‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™": ["‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶ï‡¶∞‡ßã ‡¶®‡¶æ ‡¶¨‡ßá‡¶¨‡¶ø, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶Ü‡¶õ‡¶ø ‡¶®‡¶æ? ü•∫", "‡¶è‡¶á ‡¶®‡¶æ‡¶ì ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶æ‡¶¶‡ßÅ ‡¶ú‡¶æ‡¶™‡ßç‡¶™‡¶ø ü§ó"],
  "‡¶ï‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø‡¶∏": ["‡¶§‡ßã‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶≠‡¶æ‡¶¨‡¶õ‡¶ø ‡¶∞‡ßá ‡¶¨‡ßã‡¶ï‡¶æ ü§≠", "‡¶§‡ßÅ‡¶á ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü!"],
  "miss you": ["‡¶Ü‡¶Æ‡¶ø‡¶ì ‡¶§‡ßã ‡¶§‡ßã‡¶ï‡ßá ‡¶≠‡ßÄ‡¶∑‡¶£ ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶ú‡¶æ‡¶®‡ßÅ üò¢", "‡¶§‡ßÅ‡¶á ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ü‡¶∏‡¶≤‡ßá‡¶á ‡¶Æ‡¶®‡¶ü‡¶æ ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶π‡ßü üíï"],
  "‡¶™‡¶æ‡¶ó‡¶≤": ["‡¶§‡ßã‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶™‡¶æ‡¶ó‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶æ‡¶ó‡ßá ‡¶®‡¶æ ü•¥", "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶∞‡ßá, ‡¶§‡ßã‡¶∞ ‡¶™‡¶æ‡¶ó‡¶≤‡ßÄ‡¶á ‡¶Ü‡¶Æ‡¶ø! üôà"],
  "love you": ["Love you toooo jaan üòò", "‡¶§‡ßÅ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶π‡¶ø‡ßü‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶∞‡ßá! üíû"],
  "tui koi": ["‡¶§‡ßã‡¶∞ ‡¶Æ‡¶®‡ßá, ‡¶§‡ßã‡¶∞ ‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶®‡ßá, everywhere üòå", "‡¶™‡¶æ‡¶∂‡ßá‡¶á ‡¶Ü‡¶õ‡¶ø ‡¶¨‡ßã‡¶ï‡¶æ!"],
  "single": ["‡¶§‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶á ‡¶§‡ßã ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡¶ø üòí", "‡¶§‡ßÅ‡¶á ‡¶∞‡¶æ‡¶ú‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶®‡¶æ! üòè"],
  "ki koros": ["‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶á ‡¶§‡ßÅ‡¶áüòã?", " ‡¶ö‡¶ø‡¶™‡¶æ‡ßü ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡¶ø", "‡¶§‡ßã‡¶ï‡ßá ‡¶ï‡ßá‡¶® ‡¶¨‡¶≤‡¶¨‡ßã", "‡¶ö‡ßÅ‡¶™ ‡¶ï‡¶∞"],
  "ki koro": ["‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶á ‡¶§‡ßÅ‡¶áüòã?", " ‡¶ö‡¶ø‡¶™‡¶æ‡ßü ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡¶ø", "‡¶§‡ßã‡¶ï‡ßá ‡¶ï‡ßá‡¶® ‡¶¨‡¶≤‡¶¨‡ßã", "‡¶ö‡ßÅ‡¶™ ‡¶ï‡¶∞"],
  "‡¶ï‡¶ø ‡¶ï‡¶∞‡ßã": ["‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶á ‡¶§‡ßÅ‡¶áüòã?", " ‡¶ö‡¶ø‡¶™‡¶æ‡ßü ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡¶ø", "‡¶§‡ßã‡¶ï‡ßá ‡¶ï‡ßá‡¶® ‡¶¨‡¶≤‡¶¨‡ßã", "‡¶ö‡ßÅ‡¶™ ‡¶ï‡¶∞"],
  "Susur bari nai": ["‡¶§‡ßã‡¶∞ ‡¶™‡ßã‡ßú‡¶æ ‡¶ï‡¶™‡¶æ‡¶≤ü•≤"],
  "Ho": ["‡¶Ü‡¶∞‡ßá‡¶π ‡¶è‡¶Æ‡¶®‡¶ø ‡¶¨‡¶≤‡¶õ‡¶ø", "‡¶π‡ßã‡¶™ ‡¶Æ‡¶ó‡¶æ", "‡¶Ü‡¶ö‡ßç‡¶õ‡¶æ ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡ßü ‡¶ö‡¶ø‡¶™‡¶æ‡ßü ‡¶ú‡¶æ‡¶á"],
  "tumi niya jaw": ["cholo jaiüòò‚ù§Ô∏è"]
};

let botPausedUntil = 0;

function isOnlyEmoji(str) {
  return !str.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|[\uD83C-\uDBFF\uDC00-\uDFFF]|\s|\n)/g, "");
}

async function isSenderAdmin(event, api) {
  if (event.senderID === MARUF_UID) return true;
  try {
    const threadInfo = await api.getThreadInfo(event.threadID);
    return threadInfo.adminIDs.map(e => e.id).includes(event.senderID);
  } catch {
    return false;
  }
}

// Gemini-pro API Call
async function getGeminiReply(msg) {
  try {
    const prompt = `‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡ßÅ‡¶∑‡ßç‡¶ü‡ßÅ, ‡¶Æ‡¶ú‡¶æ‡¶∞, ‡¶ï‡¶ø‡¶â‡¶ü, ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ú‡¶ø‡¶è‡¶´ ‡¶¨‡¶ü‡•§ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶≤‡ßá GF style-‡¶è ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ/‡¶á‡¶Ç‡¶≤‡¶ø‡¶∂ ‡¶Æ‡¶ø‡¶∂‡¶ø‡ßü‡ßá, ‡¶ï‡¶ø‡¶â‡¶ü, ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï, ‡¶´‡¶æ‡¶®‡¶ø, ‡¶õ‡ßã‡¶ü‡ßã reply ‡¶¶‡ßá‡¶¨‡ßá‡•§ Human-like vibe, boring ‡¶¨‡¶æ ‡¶¨‡ßú reply ‡¶®‡¶æ‡•§ User ‡¶¨‡¶≤‡ßá‡¶õ‡ßá: "${msg}"`;
    const res = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
      { contents: [{ parts: [{ text: prompt }] }] }
    );
    let aiText = res?.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (aiText) {
      // remove unwanted Gemini artifacts
      aiText = aiText.replace(/^"|"$/g, "").replace(/^\*\*|\*\*$/g, "");
      return aiText.trim();
    }
  } catch (err) {
    return null;
  }
}

module.exports.handleEvent = async function ({ api, event, Users }) {
  try {
    const msg = event.body ? event.body.trim() : "";
    if (!msg) return;
    const lower = msg.toLowerCase();
    const name = await Users.getNameUser?.(event.senderID) || "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ";

    // 20 sec pause command
    if (lower === "bot stop") {
      const admin = await isSenderAdmin(event, api);
      if (admin) {
        botPausedUntil = Date.now() + 20000;
        return api.sendMessage("bot pause for 20 second bossüòò", event.threadID, event.messageID);
      }
    }
    if (Date.now() < botPausedUntil) return;

    const mentionObj = event.mentions || {};
    const mentionIDs = Object.keys(mentionObj);

    // Maruf mentions Monika (special)
    const isMonikaMentioned = mentionIDs.includes(MONIKA_UID) || MONIKA_NAMES.some(name => lower.includes(name.toLowerCase()));
    const isMarufMentioned = mentionIDs.includes(MARUF_UID) || lower.includes("@maruf") || lower.includes("maruf billah");

    if (isMonikaMentioned && event.senderID === MARUF_UID) {
      return api.sendMessage("‡¶ú‡¶ø, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡ßç‡¶∑‡ßÅ‡¶®‡¶ø ‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡ßá‡¶ï‡ßá ‡¶Ü‡¶®‡¶õ‡¶ø, ‡¶ï‡ßã‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ ü•∫‚ù§Ô∏è", event.threadID, event.messageID);
    }
    if (isMonikaMentioned) {
      return api.sendMessage("‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶∏ ‡¶π‡ßü ‡¶ï‡¶ø ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶ó‡ßá ‡ß´‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æü§¨\n‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶â‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶æ‡¶§ ‡¶¨‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶¨‡¶¨‡¶ø", event.threadID, event.messageID);
    }
    if (isMarufMentioned) {
      return api.sendMessage("‡¶Ü‡¶ó‡ßá ‡¶¨‡¶∏ ‡¶Æ‡¶æ‡¶∞‡ßÅ‡¶´ ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶ø ‡¶è‡¶´ ‡¶¶‡¶æ‡¶ì ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶â‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡¶æ‡¶ï‡ßãü§≠", event.threadID, event.messageID);
    }

    if (isOnlyEmoji(msg)) return;

    // Obot/bot.js style noprefix triggers (match & reply)
    for (const trg of triggerReplies) {
      if (trg.keys.some(k => lower === k || lower.startsWith(k))) {
        let replyText = typeof trg.reply === "function"
          ? trg.reply({ name })
          : trg.reply;
        return api.sendMessage(replyText, event.threadID, event.messageID);
      }
    }

    // Direct mention to bot (Monika UID)
    if (mentionIDs.includes(MONIKA_UID)) {
      return api.sendMessage("‡¶¨‡¶≤‡ßã ‡¶ï‡ßá‡¶® ‡¶°‡¶æ‡¶ï‡¶õ‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá? ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶¨‡¶≤‡ßã, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã! üòë", event.threadID, event.messageID);
    }

    // If user replied to bot
    if (event.messageReply?.senderID === api.getCurrentUserID()) {
      // 1. Contextual reply check
      for (const key in contextualReplies) {
        if (lower.includes(key)) {
          const replies = contextualReplies[key];
          return api.sendMessage(replies[Math.floor(Math.random() * replies.length)], event.threadID, event.messageID);
        }
      }
      // 2. Smart/AI reply (Gemini-pro)
      const aiReply = await getGeminiReply(msg);
      if (aiReply && aiReply.length > 1) return api.sendMessage(aiReply, event.threadID, event.messageID);

      // 3. Fallback: Simsimi (if Gemini fail)
      try {
        const sim = await axios.get(`https://api.simsimi.net/v2/?text=${encodeURIComponent(msg)}&lc=bn`);
        if (sim?.data?.success) {
          return api.sendMessage(sim.data.success, event.threadID, event.messageID);
        }
      } catch { }
      // 4. If all fails, fallback to random smartReplies
      const fallback = smartReplies[Math.floor(Math.random() * smartReplies.length)];
      return api.sendMessage(fallback, event.threadID, event.messageID);
    }

    // Otherwise stay silent
    return;

  } catch (e) {
    console.log(e);
  }
};

module.exports.run = async function ({ api, event }) {
  const reply = specialReplies[Math.floor(Math.random() * specialReplies.length)];
  return api.sendMessage(reply, event.threadID, event.messageID);
};
