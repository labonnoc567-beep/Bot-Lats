// commands/bfmode.js
const fs = require("fs");
const path = require("path");

// ====== CONFIG ======
const OWNER_UID = "100070782965051"; // Maruf
const DATA_DIR = path.join(__dirname, "..", "data");
const DATA_FILE = path.join(DATA_DIR, "bfmode.json");

// Auto check-in interval (minutes)
const CHECKIN_MINUTES = 30;

// ====== UTIL ======
function ensureDataFile() {
  if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
  if (!fs.existsSync(DATA_FILE)) {
    fs.writeFileSync(DATA_FILE, JSON.stringify({ users: {}, logs: [] }, null, 2));
  }
}
function loadDB() {
  ensureDataFile();
  return JSON.parse(fs.readFileSync(DATA_FILE, "utf8"));
}
function saveDB(db) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(db, null, 2));
}
function humanName(user, fallback = "‡¶™‡¶æ‡¶ñ‡¶ø") {
  return user?.nick || fallback;
}
function isOwner(senderID) {
  return String(senderID) === OWNER_UID;
}
function delay(ms) {
  return new Promise(res => setTimeout(res, ms));
}
function formatDate(d) {
  try {
    const x = new Date(d);
    if (Number.isNaN(x.getTime())) return d;
    return x.toISOString().slice(0, 10);
  } catch (_) { return d; }
}
function addDiary(db, uid, mood, text) {
  db.logs.push({
    uid: String(uid),
    mood,
    text,
    time: Date.now()
  });
  if (db.logs.length > 5000) db.logs = db.logs.slice(-2000);
}

// ====== ROMANTIC LINES ======
const romanticReplies = [
  (n) => `‡¶∂‡ßã‡¶® ${n}, ‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡¶ø‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶®‡ßç‡¶§ ‡¶π‡¶≤‡ßá‡¶ì ‡¶§‡ßã‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá‡¶á ‡¶è‡¶®‡¶æ‡¶∞‡ßç‡¶ú‡¶ø ‡¶´‡ßÅ‡¶≤ üîãüôÇ`,
  (n) => `‡¶§‡ßÅ‡¶á ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡¶¨‡ßÅ‡¶ï‡ßá‡¶ì ‡¶π‡ßÉ‡ßé‡¶™‡¶ø‡¶£‡ßç‡¶° ‡¶®‡ßá‡¶á ‡¶Æ‡¶®‡ßá ‡¶π‡ßü, ${n}‚Ä¶ ü´∂`,
  (n) => `‡¶ö‡¶≤, ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡ßÅ‡¶á-‡¶Ü‡¶Æ‡¶ø‚Äî‡¶¨‡¶æ‡¶ï‡¶ø‡¶ü‡¶æ ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶á, ${n} üí¨üíò`,
  (n) => `‡¶§‡ßã‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá‡¶á ‡¶π‡¶æ‡¶∏‡¶ø ‡¶Ü‡¶∏‡ßá, ${n} üòå‚ú®`,
  (n) => `‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‚Äò‡¶π‡ßÅ‡¶Æ‚Äô ‡¶¶‡¶ø‡¶≤‡ßá‡¶ì ‡¶ö‡¶≤‡¶¨‡ßá, ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ü‡¶æ ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡ßá‡¶¨‡ßã ${n} üòâ`,
];

const softCheckIns = [
  (n) => `‡¶ñ‡¶æ‡¶á‡¶≤‡¶æ? ‡¶™‡¶æ‡¶®‡¶ø ‡¶ñ‡¶æ‡¶∏ ‡¶§‡ßã ${n}? ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ñ‡ßá‡ßü‡¶æ‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶¨‡¶ø‚Äî‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶õ‡¶ø‡¶á ü´∂`,
  (n) => `‡¶Ü‡¶ú‡¶ï‡ßá ‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡¶¨‡¶ø, ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∏ ‡¶®‡ßá ‡¶®‡¶æ ${n} ‚Äî ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶∂‡ßá ‡¶Ü‡¶õ‡¶ø üôÇ`,
  (n) => `‡¶ò‡ßÅ‡¶Æ ‡¶ï‡¶Æ ‡¶π‡¶≤‡ßá ‡¶∞‡¶æ‡¶ó ‡¶ï‡¶∞‡¶¨ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ! ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∞‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá ${n} üò¥`,
  (n) => `‡¶ö‡¶æ/‡¶ï‡¶´‡¶ø ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ø‡¶∏? ‡¶§‡ßã‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶π‡¶≤‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡¶æ‡¶ó‡¶§ ${n} ‚òï`,
  (n) => `‡¶Ü‡¶ú‡¶ï‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú ‡¶¶‡¶ø‡¶¨‡¶ø‚Äî‡¶ï‡¶æ‡¶∞‡¶£ ‡¶§‡ßÅ‡¶á ‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£, ${n} üåü`,
];

const neutralReplies = [
  "‡¶π‡ßÅ‡¶Æ, ‡¶®‡ßã‡¶ü ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§",
  "‡¶¨‡ßÅ‡¶ù‡ßá‡¶õ‡¶ø, ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§",
  "‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶ï‡¶®‡ßç‡¶ü‡¶ø‡¶®‡¶ø‡¶â ‡¶ï‡¶∞‡ßã‡•§",
  "‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§",
  "‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, carry on.",
];

// ====== BIRTHDAY / ANNIVERSARY WISHES ======
function specialDayLine(n, type) {
  if (type === "birthday") {
    return `Happy Birthday ${n}! ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶§‡ßã‡¶∞ ‡¶¶‡¶ø‡¶®‚Äî‡¶π‡¶æ‡¶∏‡¶ø‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶•‡¶æ‡¶ï, ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶∂‡ßá ‡¶Ü‡¶õ‡¶ø üéÇüéâ`;
  }
  if (type === "anniversary") {
    return `Happy Anniversary ${n}! ‡¶∏‡ßç‡¶Æ‡ßÉ‡¶§‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßã‡¶ï‚Äî‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ üíû`;
  }
  return "";
}

// ====== SCHEDULER (global) ======
async function startScheduler(api) {
  if (!globalThis.__BFMODE_TIMER__) {
    globalThis.__BFMODE_TIMER__ = setInterval(async () => {
      try {
        const db = loadDB();
        const now = new Date();
        const today = now.toISOString().slice(0, 10);

        // Loop all users with bfmode = true
        for (const [uid, u] of Object.entries(db.users)) {
          if (!u.on) continue;

          // Special day wish (once per day)
          let wished = false;
          if (u.birthday === today && u.lastBirthdayWish !== today) {
            const line = specialDayLine(humanName(u, "‡¶∏‡ßã‡¶®‡¶æ"), "birthday");
            if (u.lastThreadID) api.sendMessage(line, u.lastThreadID);
            u.lastBirthdayWish = today;
            wished = true;
            addDiary(db, uid, "special", "Birthday wish auto-sent");
          }
          if (u.anniversary === today && u.lastAnnivWish !== today) {
            const line = specialDayLine(humanName(u, "‡¶ú‡¶æ‡¶®"), "anniversary");
            if (u.lastThreadID) api.sendMessage(line, u.lastThreadID);
            u.lastAnnivWish = today;
            wished = true;
            addDiary(db, uid, "special", "Anniversary wish auto-sent");
          }

          // Regular soft check-in
          if (!wished && u.lastThreadID) {
            const msg = pick(softCheckIns)(humanName(u, "‡¶™‡¶æ‡¶ñ‡¶ø"));
            api.sendMessage(msg, u.lastThreadID);
            addDiary(db, uid, "checkin", "Auto check-in sent");
          }
        }
        saveDB(db);
      } catch (e) {
        // silent
      }
    }, CHECKIN_MINUTES * 60 * 1000);
  }
}
function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// ====== COMMAND META ======
module.exports.config = {
  name: "bfmode",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Maruf Billah + ìÜ©ùôéùô™ùôØùô™ìÜ™ü•∞(„Åô„Åö)üíã & Maruf Systemüí´",
  description: "Boyfriend Mode: romantic, mood-based replies for selected users",
  commandCategory: "love",
  usages: `
.bfmode on/off   (reply/mention user)
.bfname <name>   (reply/mention user)
.setbfdate birthday YYYY-MM-DD (reply/mention user)
.setbfdate anniversary YYYY-MM-DD (reply/mention user)
.bfdiary         (reply/mention user)
  `.trim(),
  cooldowns: 2,
  prefix: true
};

// ====== INIT ======
module.exports.onLoad = async function({ api }) {
  ensureDataFile();
  startScheduler(api);
};

// ====== PASSIVE LISTENER ======
module.exports.handleEvent = async function({ api, event }) {
  // Only text messages
  if (!event || !event.body) return;

  const db = loadDB();
  const uid = String(event.senderID);
  const threadID = event.threadID;

  // Remember last thread for the user (so auto-checkin knows where to DM)
  if (!db.users[uid]) db.users[uid] = { on: false };
  db.users[uid].lastThreadID = threadID;
  saveDB(db);

  // If bfmode ON for sender ‚Üí romantic reply (but keep it subtle)
  const user = db.users[uid];
  if (user?.on === true) {
    // Only reply if message mentions bot OR is a reply to bot OR contains emotional cue words
    const text = (event.body || "").toLowerCase();
    const cues = ["miss", "valo", "love", "mon", "‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™", "‡¶≠‡¶æ‡¶≤", "‡¶∞‡¶æ‡¶ó", "‡¶≠‡¶æ‡¶≤‡¶¨‡¶æ‡¶∏‡¶ø", "miss you", "‡¶¨‡ßá‡¶¨‡¶ø", "‡¶ú‡¶æ‡¶®‡ßÅ", "‡¶ú‡¶æ‡¶®"];
    const repliedToBot = !!event.messageReply && event.messageReply.senderID === api.getCurrentUserID();
    const mentionBot = text.includes("bot") || text.includes("suzu") || text.includes("‡¶∏‡ßÅ‡¶ú‡ßÅ") || text.includes("‡¶Æ‡¶®‡¶ø‡¶ï‡¶æ");

    if (repliedToBot || mentionBot || cues.some(w => text.includes(w))) {
      const name = humanName(user, "‡¶ú‡¶æ‡¶®");
      const line = pick(romanticReplies)(name);
      // typing effect
      await delay(400);
      api.sendMessage(line, threadID);
      const db2 = loadDB();
      addDiary(db2, uid, "romantic", `Auto romantic reply: ${line}`);
      saveDB(db2);
    }
  }
};

// ====== COMMAND RUNNER ======
module.exports.run = async function({ api, event, args }) {
  const senderID = String(event.senderID);
  const threadID = event.threadID;
  const mentionIDs = Object.keys(event.mentions || {});
  const repliedUID = event.messageReply?.senderID ? String(event.messageReply.senderID) : null;

  if (!args[0]) {
    return api.sendMessage(
      "üß© BF Mode\n\n" +
      "‚Ä¢ .bfmode on/off  (reply/mention user)\n" +
      "‚Ä¢ .bfname <name>  (reply/mention user)\n" +
      "‚Ä¢ .setbfdate birthday YYYY-MM-DD  (reply/mention)\n" +
      "‚Ä¢ .setbfdate anniversary YYYY-MM-DD  (reply/mention)\n" +
      "‚Ä¢ .bfdiary  (reply/mention user)\n",
      threadID, event.messageID
    );
  }

  // Owner-only
  if (!isOwner(senderID)) {
    return api.sendMessage("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶á Owner (Maruf) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§", threadID, event.messageID);
  }

  // Target resolve
  const targetUID =
    (mentionIDs[0] ? String(mentionIDs[0]) : null) ||
    (repliedUID ? repliedUID : null) ||
    (args[1] && /^\d+$/.test(args[1]) ? String(args[1]) : null);

  const db = loadDB();

  // Sub-commands
  const sub = args[0].toLowerCase();

  // ===== .bfmode on/off =====
  if (sub === "on" || sub === "off") {
    if (!targetUID) return api.sendMessage("‡¶ï‡¶æ‡¶ï‡ßá ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á/‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶¶‡¶ø‡¶®‡•§", threadID, event.messageID);
    if (!db.users[targetUID]) db.users[targetUID] = { on: false };

    db.users[targetUID].on = (sub === "on");
    saveDB(db);

    return api.sendMessage(
      db.users[targetUID].on
        ? "‚úÖ BF Mode ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶®‡¶ø ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§"
        : "‚õî BF Mode ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§",
      threadID, event.messageID
    );
  }

  // ===== .bfname <name> =====
  if (sub === "bfname") {
    if (!targetUID) return api.sendMessage("‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á/‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶®‡•§", threadID, event.messageID);
    const name = args.slice(1).join(" ").trim();
    if (!name) return api.sendMessage("‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶æ‡¶ï‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: .bfname <name>", threadID, event.messageID);

    if (!db.users[targetUID]) db.users[targetUID] = { on: false };
    db.users[targetUID].nick = name;
    saveDB(db);

    return api.sendMessage(`‚úÖ ‡¶°‡¶æ‡¶ï‡¶®‡¶æ‡¶Æ ‡¶∏‡ßá‡¶ü: ${name}`, threadID, event.messageID);
  }

  // ===== .setbfdate birthday YYYY-MM-DD / anniversary YYYY-MM-DD =====
  if (sub === "setbfdate") {
    const type = (args[1] || "").toLowerCase();
    const value = (args[2] || "").trim();

    if (!targetUID) return api.sendMessage("‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á/‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶®‡•§", threadID, event.messageID);
    if (!["birthday", "anniversary"].includes(type)) {
      return api.sendMessage("‡¶ß‡¶∞‡¶® ‡¶¶‡¶ø‡¶®: birthday / anniversary\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: .setbfdate birthday 2002-07-15", threadID, event.messageID);
    }
    if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) {
      return api.sendMessage("‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¶‡¶ø‡¶® YYYY-MM-DD ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡•§", threadID, event.messageID);
    }

    if (!db.users[targetUID]) db.users[targetUID] = { on: false };
    db.users[targetUID][type] = value;
    saveDB(db);

    return api.sendMessage(`‚úÖ ${type} ‡¶∏‡ßá‡¶ü: ${formatDate(value)}`, threadID, event.messageID);
  }

  // ===== .bfdiary =====
  if (sub === "bfdiary") {
    const uid = targetUID || senderID;
    const logs = loadDB().logs.filter(x => x.uid === String(uid)).slice(-10).reverse();
    if (logs.length === 0) return api.sendMessage("‡¶°‡¶æ‡ßü‡ßá‡¶∞‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø‡•§", threadID, event.messageID);

    const lines = logs.map(x => {
      const t = new Date(x.time).toLocaleString("en-GB");
      return `‚Ä¢ [${x.mood}] ${t} ‚Üí ${x.text}`;
    }).join("\n");

    return api.sendMessage(`üìù BF Diary (last 10)\n${lines}`, threadID, event.messageID);
  }

  // Fallback
  return api.sendMessage("‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶∏‡¶æ‡¶¨-‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡•§ ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§", threadID, event.messageID);
};
